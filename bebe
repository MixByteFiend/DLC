local function safeGetRemote(path: string)
	local node = game
	for seg in string.gmatch(path, "[^%.]+") do
		node = node:FindFirstChild(seg)
		if not node then
			return nil
		end
	end
	return node:IsA("RemoteFunction") and node or nil
end

local function safeInvoke(remote, ...)
	if not remote then
		return nil
	end
	for _ = 1, 3 do 
		local ok, res = pcall(remote.InvokeServer, remote, ...)
		if ok and res then
			return res
		end
		task.wait(0.25)
	end
	return nil
end

local DEFAULT_STATS = { ODM_Damage = 0, ODM_Speed = 0, Crit_Chance = 0 }

local GET = safeGetRemote("ReplicatedStorage.Assets.Remotes.GET")
local Data = safeInvoke(GET, "Data", "Stats") or {}

for k, v in pairs(DEFAULT_STATS) do
	if Data[k] == nil then
		Data[k] = v
	end
end

local function attr(obj, key, def)
	local ok, val = pcall(obj.GetAttribute, obj, key)
	return ok and val or def
end

pcall(function()
	local cg = game:GetService("CoreGui"):FindFirstChild("StatsGUI")
	if cg then
		cg:Destroy()
	end
end)

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local Weapon = attr(player, "Weapon", "â€”")
local Level = attr(player, "Level", 0)

local statsGui = Instance.new("ScreenGui")
statsGui.Name, statsGui.ResetOnSpawn, statsGui.Enabled = "StatsGUI", false, false
statsGui.Parent = game:GetService("CoreGui")

local COLORS = {
	BACKGROUND = Color3.fromRGB(25, 25, 35),
	HEADER = Color3.fromRGB(35, 30, 50),
	TEXT = Color3.fromRGB(255, 255, 255),
	ACCENT = Color3.fromRGB(130, 60, 250),
	SECONDARY = Color3.fromRGB(45, 40, 70),
	SUCCESS = Color3.fromRGB(110, 220, 160),
	WARNING = Color3.fromRGB(250, 166, 26),
	ERROR = Color3.fromRGB(240, 71, 71),
	PURPLE_DARK = Color3.fromRGB(76, 40, 130),
	PURPLE_LIGHT = Color3.fromRGB(150, 80, 255),
}
local TWEEN_INFO = TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
local BASE_SIZE = {
	WIDTH = 300,
	HEIGHT = 300,
	CORNER_RADIUS = 8,
	HEADER_HEIGHT = 40,
	TITLE_SIZE = 18,
	STAT_HEIGHT = 30,
	STAT_TEXT_SIZE = 14,
	HEADER_TEXT_SIZE = 16,
	STATUS_TEXT_SIZE = 14,
	CLOSE_BUTTON_SIZE = 24,
}
local currentScale = 1
local function setStroke(label, thickness)
    local t = math.clamp(1 - (thickness * 0.25), 0, 1) 
    label.TextStrokeTransparency = t
end

local function CreateRoundFrame(name, size, pos, parent, bg)
	local f = Instance.new("Frame")
	f.Name, f.Size, f.Position = name, size, pos
	f.BackgroundColor3, f.BorderSizePixel = bg, 0
	local c = Instance.new("UICorner", f)
	c.CornerRadius = UDim.new(0, BASE_SIZE.CORNER_RADIUS * currentScale)
	local sh = Instance.new("ImageLabel", f)
	sh.Name, sh.AnchorPoint, sh.BackgroundTransparency = "Shadow", Vector2.new(0.5, 0.5), 1
	sh.Position, sh.ZIndex = UDim2.new(0.5, 0, 0.5, 0), -1
	sh.Size = UDim2.new(1, 24 * currentScale, 1, 24 * currentScale)
	sh.Image, sh.ImageColor3, sh.ImageTransparency = "rbxassetid://6014261993", Color3.new(0, 0, 0), 0.5
	sh.ScaleType, sh.SliceCenter = Enum.ScaleType.Slice, Rect.new(49, 49, 450, 450)
	f.Parent = parent
	return f
end

local function CreateTextLabel(name, text, size, pos, parent, clr, fsize, weight, align, glow)
	local l = Instance.new("TextLabel")
	l.Name, l.Size, l.Position, l.BackgroundTransparency = name, size, pos, 1
	l.Text, l.TextColor3 = text, clr
	l.Font = (weight == "Bold" and Enum.Font.GothamBold) or Enum.Font.GothamMedium
	l.TextSize = (fsize or 14) * currentScale
	l.TextXAlignment = align or Enum.TextXAlignment.Left
	l.TextWrapped, l.TextStrokeTransparency = true, 1
	l.TextStrokeColor3 = Color3.fromRGB(
		math.min(clr.R * 1.5 * 255, 255) / 255,
		math.min(clr.G * 1.5 * 255, 255) / 255,
		math.min(clr.B * 1.5 * 255, 255) / 255
	)
	if glow then
		spawn(function()
			local t, inc = 1, false
			while l.Parent do
				t = inc and (t - 0.03) or (t + 0.03)
				if t <= 0.4 then
					inc = false
				elseif t >= 0.8 then
					inc = true
				end
				l.TextStrokeTransparency = t
				task.wait(0.05)
			end
		end)
	end
	l.Parent = parent
	return l
end

local function CreateAnimatedGradient(parent)
	local g = Instance.new("UIGradient", parent)
	g.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, COLORS.PURPLE_DARK),
		ColorSequenceKeypoint.new(0.5, COLORS.PURPLE_LIGHT),
		ColorSequenceKeypoint.new(1, COLORS.PURPLE_DARK),
	})
	g.Rotation = 45
	spawn(function()
		local off = 0
		while parent and parent.Parent do
			g.Offset = Vector2.new(off, off)
			off = (off + 0.001) % 1
			task.wait(0.02)
		end
	end)
	return g
end

local mainFrame = CreateRoundFrame(
	"MainFrame",
	UDim2.new(0, BASE_SIZE.WIDTH * currentScale, 0, BASE_SIZE.HEIGHT * currentScale),
	UDim2.new(0, 0, 0, 0),
	statsGui,
	COLORS.BACKGROUND
)

local function layoutMainFrame()
	mainFrame.AnchorPoint = Vector2.new(0, 0)
	mainFrame.Position = UDim2.new(0, 20 * currentScale, 0.05, 0)
end
layoutMainFrame()

local mainGradient = CreateAnimatedGradient(mainFrame)
local headerFrame = CreateRoundFrame(
	"HeaderFrame",
	UDim2.new(1, 0, 0, BASE_SIZE.HEADER_HEIGHT * currentScale),
	UDim2.new(0, 0, 0, 0),
	mainFrame,
	COLORS.HEADER
)
local headerGradient = CreateAnimatedGradient(headerFrame)

local titleLabel = CreateTextLabel(
	"TitleLabel",
	"Expensive Hub",
	UDim2.new(0.7, 0, 1, 0),
	UDim2.new(0.05, 0, 0, 0),
	headerFrame,
	COLORS.TEXT,
	BASE_SIZE.TITLE_SIZE,
	"Bold",
	nil,
	true
)

local statsContainer = CreateRoundFrame(
	"StatsContainer",
	UDim2.new(0.9, 0, 0.55, 0),
	UDim2.new(0.05, 0, 0.15, 0),
	mainFrame,
	COLORS.SECONDARY
)
local statsGradient = CreateAnimatedGradient(statsContainer)
statsGradient.Rotation = 135
local statsHeader = CreateTextLabel(
	"StatsHeader",
	"Statistics",
	UDim2.new(0.9, 0, 0, 30 * currentScale),
	UDim2.new(0.05, 0, 0.02, 0),
	statsContainer,
	COLORS.TEXT,
	BASE_SIZE.HEADER_TEXT_SIZE,
	"Bold",
	nil,
	true
)

local stats = {
	{ name = "Level", value = player:GetAttribute("Level") },
	{ name = "ODM Damage", value = Data.ODM_Damage },
	{ name = "ODM Speed", value = Data.ODM_Speed },
	{ name = "Crit Chance", value = Data.Crit_Chance },
}
for i, s in ipairs(stats) do
	local row = CreateRoundFrame(
		"StatRow" .. i,
		UDim2.new(0.9, 0, 0, BASE_SIZE.STAT_HEIGHT * currentScale),
		UDim2.new(0.05, 0, 0.18 + (i - 1) * 0.20, 0),
		statsContainer,
		COLORS.BACKGROUND
	)
	local glow = Instance.new("ImageLabel", row)
	glow.Name, glow.AnchorPoint, glow.BackgroundTransparency = "Glow", Vector2.new(0.5, 0.5), 1
	glow.Position = UDim2.new(0.5, 0, 0.5, 0)
	glow.Size = UDim2.new(1, 10 * currentScale, 1, 10 * currentScale)
	glow.ZIndex = -1
	glow.Image, glow.ImageColor3, glow.ImageTransparency = "rbxassetid://6014261993", COLORS.ACCENT, 0.85
	glow.ScaleType, glow.SliceCenter = Enum.ScaleType.Slice, Rect.new(49, 49, 450, 450)
	CreateTextLabel(
		"StatName" .. i,
		s.name,
		UDim2.new(0.6, 0, 1, 0),
		UDim2.new(0.05, 0, 0, 0),
		row,
		COLORS.TEXT,
		BASE_SIZE.STAT_TEXT_SIZE,
		nil,
		nil,
		false
	)
	CreateTextLabel(
		"StatValue" .. i,
		s.value,
		UDim2.new(0.3, 0, 1, 0),
		UDim2.new(0.7, 0, 0, 0),
		row,
		COLORS.ACCENT,
		BASE_SIZE.STAT_TEXT_SIZE,
		"Bold",
		Enum.TextXAlignment.Left,
		true
	)
end

local statusContainer = CreateRoundFrame(
	"StatusContainer",
	UDim2.new(0.9, 0, 0.2, 0),
	UDim2.new(0.05, 0, 0.75, 0),
	mainFrame,
	COLORS.SECONDARY
)
local statusGradient = CreateAnimatedGradient(statusContainer)
statusGradient.Rotation = 90
local statusHeader = CreateTextLabel(
    "StatusHeader",
    "AutoFarm",
    UDim2.new(0.9, 0, 0, 20 * currentScale),
    UDim2.new(0.05, 0, 0.1, 0),
    statusContainer,
    COLORS.TEXT,
    BASE_SIZE.HEADER_TEXT_SIZE,
    "Bold",
    nil,
    true
)
local statusText = CreateTextLabel(
	"StatusText",
	"Status: Idle",
	UDim2.new(0.9, 0, 0, 20 * currentScale),
	UDim2.new(0.05, 0, 0.5, 0),
	statusContainer,
	COLORS.SUCCESS,
	BASE_SIZE.STATUS_TEXT_SIZE,
	nil,
	nil,
	true
)

local glowOverlay = CreateRoundFrame(
	"GlowOverlay",
	UDim2.new(0.9, 0, 0.9, 0),
	UDim2.new(0.05, 0, 0.05, 0),
	mainFrame,
	Color3.new(1, 1, 1)
)
glowOverlay.BackgroundTransparency, glowOverlay.ZIndex = 0.95, 2
local overlayGrad = CreateAnimatedGradient(glowOverlay)
overlayGrad.Rotation = 30
overlayGrad.Transparency = NumberSequence.new({
	NumberSequenceKeypoint.new(0, 0.98),
	NumberSequenceKeypoint.new(0.5, 0.92),
	NumberSequenceKeypoint.new(1, 0.98),
})

local closeButton = Instance.new("TextButton", headerFrame)
closeButton.Name = "CloseButton"
closeButton.Size =
	UDim2.new(0, BASE_SIZE.CLOSE_BUTTON_SIZE * currentScale, 0, BASE_SIZE.CLOSE_BUTTON_SIZE * currentScale)
closeButton.Position = UDim2.new(0.95, 0, 0.5, 0)
closeButton.AnchorPoint = Vector2.new(0.5, 0.5)
closeButton.BackgroundTransparency = 1
closeButton.Text, closeButton.TextColor3, closeButton.Font, closeButton.TextSize =
	"X", COLORS.TEXT, Enum.Font.GothamBold, 18 * currentScale

local dragging, dragOrigin, frameOrigin
headerFrame.InputBegan:Connect(function(inp)
	if inp.UserInputType == Enum.UserInputType.MouseButton1 or inp.UserInputType == Enum.UserInputType.Touch then
		dragging = true
		dragOrigin = inp.Position
		frameOrigin = mainFrame.Position
		TweenService:Create(headerFrame, TweenInfo.new(0.1), { BackgroundColor3 = COLORS.ACCENT }):Play()
	end
end)
UserInputService.InputChanged:Connect(function(inp)
	if
		dragging
		and (inp.UserInputType == Enum.UserInputType.MouseMovement or inp.UserInputType == Enum.UserInputType.Touch)
	then
		local d = inp.Position - dragOrigin
		mainFrame.Position =
			UDim2.new(frameOrigin.X.Scale, frameOrigin.X.Offset + d.X, frameOrigin.Y.Scale, frameOrigin.Y.Offset + d.Y)
	end
end)
headerFrame.InputEnded:Connect(function(inp)
	if inp.UserInputType == Enum.UserInputType.MouseButton1 or inp.UserInputType == Enum.UserInputType.Touch then
		dragging = false
		TweenService:Create(headerFrame, TweenInfo.new(0.1), { BackgroundColor3 = COLORS.HEADER }):Play()
	end
end)

local function UpdateScale(newScale)
	newScale = math.clamp(newScale, 0.5, 2.0)

	if newScale == currentScale then
		return
	end

	local scaleFactor = newScale / currentScale
	currentScale = newScale

	TweenService:Create(mainFrame, TWEEN_INFO, {
		Size = UDim2.new(0, BASE_SIZE.WIDTH * currentScale, 0, BASE_SIZE.HEIGHT * currentScale),
	}):Play()

	TweenService:Create(headerFrame, TWEEN_INFO, {
		Size = UDim2.new(1, 0, 0, BASE_SIZE.HEADER_HEIGHT * currentScale),
	}):Play()

	titleLabel.TextSize = BASE_SIZE.TITLE_SIZE * currentScale

	statsHeader.TextSize = BASE_SIZE.HEADER_TEXT_SIZE * currentScale
	statsHeader.Size = UDim2.new(0.9, 0, 0, 30 * currentScale)

	for i = 1, #stats do
		local statRow = statsContainer:FindFirstChild("StatRow" .. i)
		if statRow then
			TweenService:Create(statRow, TWEEN_INFO, {
				Position = UDim2.new(0.05, 0, 0.15 + (i - 1) * 0.16 * currentScale, 0),
			}):Play()
			TweenService:Create(statRow, TWEEN_INFO, {
				Size = UDim2.new(0.9, 0, 0, BASE_SIZE.STAT_HEIGHT * currentScale),
			}):Play()

			local glow = statRow:FindFirstChild("Glow")
			if glow then
				TweenService:Create(glow, TWEEN_INFO, {
					Size = UDim2.new(1, 10 * currentScale, 1, 10 * currentScale),
				}):Play()
			end

			local statName = statRow:FindFirstChild("StatName" .. i)
			if statName then
				statName.TextSize = BASE_SIZE.STAT_TEXT_SIZE * currentScale

				local strokeThickness = math.max(1, math.floor(currentScale * 1.5))
                setStroke(statName, strokeThickness)

			end

			local statValue = statRow:FindFirstChild("StatValue" .. i)
			if statValue then
				statValue.TextSize = BASE_SIZE.STAT_TEXT_SIZE * currentScale

				local strokeThickness = math.max(1, math.floor(currentScale * 1.5))
				setStroke(statValue, strokeThickness)
			end
		end
	end

	statusHeader.TextSize = BASE_SIZE.HEADER_TEXT_SIZE * currentScale
	statusHeader.Size = UDim2.new(0.9, 0, 0, 20 * currentScale)

	statusText.TextSize = BASE_SIZE.STATUS_TEXT_SIZE * currentScale
	statusText.Size = UDim2.new(0.9, 0, 0, 20 * currentScale)

	local strokeThickness = math.max(1, math.floor(currentScale * 1.5))
    setStroke(titleLabel, strokeThickness)
    setStroke(statsHeader, strokeThickness)
    setStroke(statusHeader, strokeThickness)
    setStroke(statusText, strokeThickness)

	closeButton.Size =
		UDim2.new(0, BASE_SIZE.CLOSE_BUTTON_SIZE * currentScale, 0, BASE_SIZE.CLOSE_BUTTON_SIZE * currentScale)
	closeButton.TextSize = 18 * currentScale

	for _, descendant in pairs(mainFrame:GetDescendants()) do
		if descendant:IsA("UICorner") then
			descendant.CornerRadius = UDim.new(0, BASE_SIZE.CORNER_RADIUS * currentScale)
		end

		if descendant:IsA("ImageLabel") and descendant.Name == "Shadow" then
			TweenService:Create(descendant, TWEEN_INFO, {
				Size = UDim2.new(1, 24 * currentScale, 1, 24 * currentScale),
			}):Play()
		end
	end
	layoutMainFrame()
end

local function AutoScale()
	local screenSize = workspace.CurrentCamera.ViewportSize
	local targetScale = 1.0

	if screenSize.X >= 2560 or screenSize.Y >= 1440 then
		targetScale = 1.7
	elseif screenSize.X <= 1366 or screenSize.Y <= 768 then
		targetScale = 0.95
	elseif screenSize.X <= 1024 or screenSize.Y <= 600 then
		targetScale = 0.8
	end

	UpdateScale(targetScale)
end

AutoScale()

workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(function()
	AutoScale()
end)

local function UpdateStat(statIndex, newValue)
	local statRow = statsContainer:FindFirstChild("StatRow" .. statIndex)
	if statRow and statRow:FindFirstChild("StatValue" .. statIndex) then
		local statValue = statRow:FindFirstChild("StatValue" .. statIndex)

		local oldValue = tonumber(statValue.Text) or 0
		local newValueNum = tonumber(newValue) or 0

		local flyingText = statValue:Clone()
		flyingText.Name = "FlyingText"
		flyingText.Parent = statRow
		flyingText.TextTransparency = 0

		local direction = 1
		local glowColor = COLORS.SUCCESS

		if newValueNum < oldValue then
			direction = -1
			glowColor = COLORS.ERROR
		end

		flyingText.TextStrokeTransparency = 0.3
		flyingText.TextStrokeColor3 = glowColor

		spawn(function()
			for i = 1, 10 do
				flyingText.Position = flyingText.Position + UDim2.new(0, 0, -0.05 * direction, 0)
				flyingText.TextTransparency = flyingText.TextTransparency + 0.1
				flyingText.TextStrokeTransparency = flyingText.TextStrokeTransparency + 0.07
				wait(0.03)
			end
			flyingText:Destroy()
		end)

		statValue.TextTransparency = 1
		statValue.TextStrokeTransparency = 1
		statValue.Text = tostring(newValue)
		statValue.TextStrokeColor3 = glowColor

		TweenService:Create(statValue, TWEEN_INFO, {
			TextTransparency = 0,
			TextStrokeTransparency = 0.7,
		}):Play()

		local originalColor = statRow.BackgroundColor3
		TweenService:Create(statRow, TweenInfo.new(0.2), {
			BackgroundColor3 = glowColor,
		}):Play()

		spawn(function()
			wait(0.2)
			TweenService:Create(statRow, TweenInfo.new(0.5), {
				BackgroundColor3 = originalColor,
			}):Play()
		end)

		local glow = statRow:FindFirstChild("Glow")
		if glow then
			glow.ImageColor3 = glowColor
			glow.ImageTransparency = 0.3

			spawn(function()
				for i = 1, 2 do
					TweenService:Create(glow, TweenInfo.new(0.3), { ImageTransparency = 0.7 }):Play()
					wait(0.3)
					TweenService:Create(glow, TweenInfo.new(0.3), { ImageTransparency = 0.4 }):Play()
					wait(0.3)
				end

				TweenService:Create(glow, TweenInfo.new(0.5), {
					ImageTransparency = 0.85,
					ImageColor3 = COLORS.ACCENT,
				}):Play()
			end)
		end
		task.delay(0.5, function()
			TweenService:Create(
				statValue,
				TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
				{ TextStrokeTransparency = 1 } 
			):Play()
		end)
	end
end

local function UpdateStatus(text, isError)
	local color = COLORS.SUCCESS
	if isError then
		color = COLORS.ERROR
	end

	statusText.Text = "Status: " .. text
	statusText.TextColor3 = color

	statusText.TextTransparency = 1
	TweenService:Create(statusText, TWEEN_INFO, { TextTransparency = 0 }):Play()

	local statusGlow = Instance.new("ImageLabel")
	statusGlow.Name = "StatusGlow"
	statusGlow.AnchorPoint = Vector2.new(0.5, 0.5)
	statusGlow.BackgroundTransparency = 1
	statusGlow.Position = UDim2.new(0.5, 0, 0.5, 0)
	statusGlow.Size = UDim2.new(1, 20 * currentScale, 1, 20 * currentScale)
	statusGlow.ZIndex = 0
	statusGlow.Image = "rbxassetid://6014261993"
	statusGlow.ImageColor3 = color
	statusGlow.ImageTransparency = 0.6
	statusGlow.ScaleType = Enum.ScaleType.Slice
	statusGlow.SliceCenter = Rect.new(49, 49, 450, 450)
	statusGlow.Parent = statusContainer

	for _, child in pairs(statusContainer:GetChildren()) do
		if child.Name == "StatusGlow" and child ~= statusGlow then
			child:Destroy()
		end
	end

	TweenService:Create(statusGlow, TweenInfo.new(1.5), { ImageTransparency = 0.9 }):Play()
	spawn(function()
		wait(1.5)
		if statusGlow and statusGlow.Parent then
			statusGlow:Destroy()
		end
	end)
end
local lastPos = mainFrame.Position
local isVisible = false

local function Show()
	if isVisible then
		return
	end
	isVisible = true
	statsGui.Enabled = true
	mainFrame.Visible = true
	mainFrame.Size = UDim2.new(0, 0, 0, 0)
	mainFrame.Position =
		UDim2.new(lastPos.X.Scale, lastPos.X.Offset - BASE_SIZE.WIDTH * currentScale, lastPos.Y.Scale, lastPos.Y.Offset)
	mainFrame.BackgroundTransparency = 1
	glowOverlay.BackgroundTransparency = 1
	TweenService:Create(
		mainFrame,
		TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out),
		{
			Size = UDim2.new(0, BASE_SIZE.WIDTH * currentScale, 0, BASE_SIZE.HEIGHT * currentScale),
			Position = lastPos,
			BackgroundTransparency = 0,
		}
	):Play()
	TweenService:Create(
		glowOverlay,
		TweenInfo.new(0.8, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
		{ BackgroundTransparency = 0.95 }
	):Play()
end

local function Hide()
	if not isVisible then
		return
	end
	isVisible = false
	lastPos = mainFrame.Position
	local tw = TweenService:Create(
		mainFrame,
		TweenInfo.new(0.35, Enum.EasingStyle.Back, Enum.EasingDirection.In),
		{
			Size = UDim2.new(0, 0, 0, 0),
			Position = UDim2.new(
				lastPos.X.Scale,
				lastPos.X.Offset - BASE_SIZE.WIDTH * currentScale,
				lastPos.Y.Scale,
				lastPos.Y.Offset
			),
		}
	)
	tw:Play()
	tw.Completed:Connect(function()
		statsGui.Enabled = false
		mainFrame.Visible = false
	end)
end

local function Toggle(flag)
	if flag == nil then
		flag = not isVisible
	end
	(flag and Show or Hide)()
end

closeButton.MouseEnter:Connect(function()
	TweenService:Create(closeButton, TWEEN_INFO, { TextColor3 = COLORS.ERROR }):Play()
end)
closeButton.MouseLeave:Connect(function()
	TweenService:Create(closeButton, TWEEN_INFO, { TextColor3 = COLORS.TEXT }):Play()
end)
closeButton.MouseButton1Click:Connect(function()
	Hide()
end)

local StatsModule = {
	Show = Show,
	Hide = Hide,
	Toggle = Toggle,
	UpdateStat = UpdateStat,
	UpdateStatus = UpdateStatus,
	UpdateScale = UpdateScale,
	GUI = statsGui,
}

do
    local function silentCall(fn, ...)
        local ok, res = xpcall(fn, function(err)
            warn("[StatsGUI]:", err)
        end, ...)
        return res
    end

    StatsModule.UpdateStat   = function(...) return silentCall(UpdateStat,   ...) end
    StatsModule.UpdateStatus = function(...) return silentCall(UpdateStatus, ...) end
end
return StatsModule
